#pragma once
#ifndef XSF_BITMAPFONT_H
#define XSF_BITMAPFONT_H

//--------------------------------------------------------------------------------------
// BitmapFont.h
//
// Texture-based font class. This class reads .abc font files that are generated by the
// FontMaker tool (and optionally compressed, or "packed", with the FontPacker tool).
// These .abc files are used to create a texture with all the font's glyphs, and also
// extract information on the dimensions of each glyph.
//
// Once created, this class is used to render text in screenspace with the following
// function:
//    DrawText( fScreenSpaceX, fScreenSpaceY, dwTextColor, strText, dwFlags );
//
// For performance, you should batch multiple DrawText calls together between Begin()
// and End() calls, as in the following example:
//    pFont->Begin();
//    pFont->DrawText( ... );
//    pFont->DrawText( ... );
//    pFont->DrawText( ... );
//    pFont->End();
//
// BitmapFont files may have embedded, artistically-colored custom glyphs, such as wingdings
// and gamepad buttons. The default font(s) used by the samples use many such custom
// glyphs. For convenience, constants have been defined to reference these glyphs in a
// string, such as:
//    pFont->DrawText( L"Press " GLYPH_A_BUTTON " to continue." );
//
// The size (extent) of the text can be computed with the following function:
//    GetTextExtent( strText, pfReturnedWidth, pfReturnedHeight, bUseFirstLineOnly );
//
// Finally, the font class can create a texture to hold rendered text, which is useful
// for static text that must be rendered for many frames, or can even be used within a
// 3D scene. (For instance, for a player's name on a jersey.) Use the following function
// for this:
//    CreateTexture( strText, dwBackColor, dwTextColor, d3dTextureFormat );
//
// See the Xbox One XDK docs for more information.
//
// Xbox Advanced Technology Group.
// Copyright (C) Microsoft Corporation. All rights reserved.
//--------------------------------------------------------------------------------------

#ifndef XSF_H_INCLUDED
#error  please include SampleFramework.h before this file
#endif

// otherwise we actually define DrawTextW
#undef DrawText

namespace XboxSampleFramework
{
    //--------------------------------------------------------------------------------------
    // Name: BitmapFont
    // Desc: Class to implement texture-based font rendering. A .tga image file of the
    //       pre-rendered font is used to create the texture. A .abc file contains info for
    //       spacing the font characters (aka glyphs).
    //--------------------------------------------------------------------------------------
    class BitmapFont
    {
    private:
        struct GlyphAttr;
        struct FontFileStrikesImage;
        struct FontFileHeaderImage;

        // some render state and assets are shared between all instances
        static ID3D11VertexShader*          ms_pVS;   // Created vertex shader
        static ID3D11PixelShader*           ms_pPS;   // Created pixel shader
        static ID3D11Buffer*                ms_pIB;   // ib
        static ID3D11InputLayout*           ms_pIL;

        std::vector< BYTE > m_data;

        // BitmapFont vertical dimensions taken from the font file
        FLOAT                       m_fFontHeight;        // Height of the font strike in pixels
        FLOAT                       m_fFontTopPadding;    // Padding above the strike zone
        FLOAT                       m_fFontBottomPadding; // Padding below the strike zone
        FLOAT                       m_fFontYAdvance;      // Number of pixels to move the cursor for a line feed

        XMFLOAT2                    m_ScaleFactor;        // Scaling constants
        FLOAT                       m_fSlantFactor;       // For italics
        DOUBLE                      m_dRotCos;            // Precalculated sine and cosine for italic like rotation
        DOUBLE                      m_dRotSin;

        D3D11_RECT                  m_rcWindow;           // Bounds rect if the text window, modify via accessors only!
        BOOL                        m_windowSet;
        UINT                        m_safeAreaInPixels;

        UINT                        m_curRTSx;
        UINT                        m_curRTSy;
    
        FLOAT                       m_fCursorX;           // Current text cursor
        FLOAT                       m_fCursorY;

        // Translator table for supporting unicode ranges
        DWORD                       m_cMaxGlyph;          // Number of entries in the translator table
        WCHAR*                      m_TranslatorTable;    // ASCII to glyph lookup table

        // Glyph data for the font
        DWORD                       m_dwNumGlyphs;        // Number of valid glyphs
        const GlyphAttr*            m_Glyphs;             // Array of glyphs

        // D3D rendering objects
        ID3D11Texture2D*            m_pFontTexture;
        ID3D11ShaderResourceView*   m_pFontTextureSRV;
        DynamicBuffer               m_cbVS;
        FLOAT                       m_invTexSize[ 2 ];
        DynamicBuffer               m_vb;

        DWORD                       m_dwNestedBeginCount;

        // Saved state for rendering (if not using a pure device)
        BOOL                        m_bSaveState;
        ID3D11SamplerState*         m_pSavedSS;
        ID3D11BlendState*           m_pSavedBS;
        FLOAT                       m_savedBSBlendFactor[ 4 ];
        UINT                        m_savedBSSampleMask;
        ID3D11DepthStencilState*    m_pSavedDSS;
        UINT                        m_savedDSSStencilRef;
        ID3D11RasterizerState*      m_pSavedRS;

        D3DDeviceContext*           m_pCurrentContext;

        BOOL m_bRotate;


    public:
        //--------------------------------------------------------------------------------------
        // Flags for the BitmapFont::DrawText() function (Or them together to combine features)
        //--------------------------------------------------------------------------------------
        enum Alignment
        {
            ALIGN_LEFT        = 0x00000000,
            ALIGN_RIGHT       = 0x00000001,
            ALIGN_CENTER_X    = 0x00000002,
            ALIGN_CENTER_Y    = 0x00000004,
            ALIGN_TRUNCATED   = 0x00000008
        };

        BitmapFont();
        ~BitmapFont();

        // Functions to create and destroy the internal objects
        HRESULT Create( _In_ D3DDevice* pDevice, _In_z_ const WCHAR* strFontFileName, _In_opt_ const D3D11_RECT* pRc = nullptr );
        HRESULT Create( _In_ D3DDevice* pDevice, _In_ ID3D11Texture2D* pFontTexture, _In_ const VOID* pFontData, _In_opt_ const D3D11_RECT* pRc = nullptr );
        VOID    Destroy();

        // Returns the dimensions of a text string
        VOID    GetTextExtent( _In_z_ const WCHAR* strText, _Out_ FLOAT* pWidth, _Out_ FLOAT* pHeight, BOOL bFirstLineOnly=FALSE ) const;
        FLOAT   GetTextWidth( _In_z_ const WCHAR* strText ) const;

        VOID    SetWindow( const D3D11_RECT &rcWindow );
        VOID    ResetWindow( UINT safeAreaInPixels );
        const D3D11_RECT& GetWindow() const;
        VOID    SetCursorPosition( FLOAT fCursorX, FLOAT fCursorY );
        VOID    SetRotationFactor( FLOAT fRotationFactor );

        // Public calls to render text. Callers can simply call DrawText(), but for
        // performance, they should batch multiple calls together, bracketed by calls to
        // Begin() and End().
        VOID    Begin( _In_ D3DDeviceContext* pCtx, _In_opt_ const D3D11_VIEWPORT* pViewport = nullptr, _In_opt_ BOOL fastSemanticsEnabled = FALSE );
        VOID    DrawText( DWORD dwColor, _In_z_ const WCHAR* strText, DWORD dwFlags=0L, FLOAT fMaxPixelWidth = 0.0f );
        VOID    DrawText( FLOAT sx, FLOAT sy, DWORD dwColor, _In_z_ const WCHAR* strText, DWORD dwFlags=0L, FLOAT fMaxPixelWidth = 0.0f );
        VOID    DrawTextF( FLOAT sx, FLOAT sy, DWORD dwColor, DWORD dwFlags, FLOAT fMaxPixelWidth, _In_z_ const WCHAR* strText, ... );
        VOID    End();

        // Accessor functions
        inline
        UINT    GetSafeAreaInPixels() const
        {
            return m_safeAreaInPixels;
        }

        inline
        FLOAT GetFontHeight() const
        {
            return m_fFontYAdvance;
        }

        inline XMFLOAT2 GetScaleFactors() const 
        {
            return m_ScaleFactor;
        }

        inline
        VOID SetSlantFactor( FLOAT fSlantFactor )
        {
            m_fSlantFactor = fSlantFactor;
        }

        inline
        VOID SetScaleFactors( const XMFLOAT2& scaleFactor )
        {
            m_ScaleFactor = scaleFactor;
        }

        inline
        VOID SetScaleFactors( FLOAT fXScaleFactor, FLOAT fYScaleFactor )
        {
            m_ScaleFactor = XMFLOAT2( fXScaleFactor, fYScaleFactor );
        }

        inline
        VOID    SetSaveState( BOOL b )
        {
            m_bSaveState = b;
        }

    private:
        // Internal helper functions
        HRESULT CreateFontShaders( _In_ D3DDevice* pDevice );
        VOID ReleaseFontShaders();
        VOID RotatePoint( _Inout_ FLOAT* X, _Inout_ FLOAT* Y, DOUBLE OriginX, DOUBLE OriginY ) const;

        HRESULT BeginQuads( UINT uNumQuads, _Deref_out_ VOID** pData );
        VOID    EndQuads( UINT uNumQuadsUsed );
    };


//--------------------------------------------------------------------------------------
// Defines for special characters. Note this depends on the font used, but all samples
// are coded to use the same basic font
//--------------------------------------------------------------------------------------
#define GLYPH_A_BUTTON      L"\400"
#define GLYPH_B_BUTTON      L"\401"
#define GLYPH_X_BUTTON      L"\402"
#define GLYPH_Y_BUTTON      L"\403"
#define GLYPH_WHITE_BUTTON  L"\404"
#define GLYPH_BLACK_BUTTON  L"\405"
#define GLYPH_LEFT_BUTTON   L"\406"
#define GLYPH_RIGHT_BUTTON  L"\407"
#define GLYPH_START_BUTTON  L"\410\411"
#define GLYPH_BACK_BUTTON   L"\412\413"

#define GLYPH_LEFT_HAND     L"\414"
#define GLYPH_RIGHT_HAND    L"\415"
#define GLYPH_UP_HAND       L"\416"
#define GLYPH_DOWN_HAND     L"\417"

#define GLYPH_BULLET        L"\500"
#define GLYPH_STAR_1        L"\501"
#define GLYPH_STAR_2        L"\502"
#define GLYPH_STAR_3        L"\503"
#define GLYPH_STAR_4        L"\504"
#define GLYPH_STAR_5        L"\505"

#define GLYPH_BIG_X         L"\506"
#define GLYPH_HAND          L"\507"
#define GLYPH_CHECK_MARK    L"\510"
#define GLYPH_X_MARK        L"\511"
#define GLYPH_SKULL         L"\512"

#define GLYPH_LEFT_TICK     L"\514"
#define GLYPH_RIGHT_TICK    L"\515"
#define GLYPH_UP_TICK       L"\516"
#define GLYPH_DOWN_TICK     L"\517"

#define GLYPH_HOLLOW_CIRCLE L"\600"
#define GLYPH_FILLED_CIRCLE L"\601"

#define GLYPH_LR_ARROW      L"\612"
#define GLYPH_UD_ARROW      L"\613"
#define GLYPH_LEFT_ARROW    L"\614"
#define GLYPH_RIGHT_ARROW   L"\615"
#define GLYPH_UP_ARROW      L"\616"
#define GLYPH_DOWN_ARROW    L"\617"

} // namespace XboxSampleFramework


#endif // XSF_BITMAPFONT_H
